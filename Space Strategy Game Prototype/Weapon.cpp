//***************************************************************************************************************************************************
//
// File Name: BattleMap.cpp
//
// Description:
//  TODO: Add file description.
//
// Change History:
//  Author               Date           Description
//  Matthew D. Yorke     12/04/2017     Initial implementation for the battle map class. Added in loading battle map information, drawing a
//                                      portion of the graphics, and movement inital movement selection of a ship.
//
//***************************************************************************************************************************************************

#include "Weapon.h"

//***************************************************************************************************************************************************
// Start Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
//
// Method Name: Weapon
//
// Description:
//  Set the member variables for this class to default values.
//
//***************************************************************************************************************************************************
Weapon::Weapon(Graphics& theGraphics, std::string theImageFileName, int theMinimumRange, int theMaximumRange, int theDamage, int thePivotPointX,
               int thePivotPointY, bool theRotateOnAttack, std::string theProjectileFilePath, int theProjectileWidth, int theProjectileHeight)
{
   mpImage = new Sprite(theGraphics, theImageFileName, 0, 0, 64, 64);
   mMinimumRange = theMinimumRange;
   mMaximumRange = theMaximumRange;
   mDamage = theDamage;
   mPivotPointX = thePivotPointX;
   mPivotPointY = thePivotPointY;
   mRotateOnAttack = theRotateOnAttack;
   mProjectileFilePath = theProjectileFilePath;
   mProjectileWidth = theProjectileWidth;
   mProjectileHeight = theProjectileHeight;
}

//************************************************************************************************************************************************
//
// Method Name: GetMinimumRange
//
// Description:
//  TODO: Add description
//
//************************************************************************************************************************************************
int Weapon::GetMinimumRange()
{
   return mMinimumRange;
}

//************************************************************************************************************************************************
//
// Method Name: GetMaximumRange
//
// Description:
//  TODO: Add description
//
//************************************************************************************************************************************************
int Weapon::GetMaximumRange()
{
   return mMaximumRange;
}

//************************************************************************************************************************************************
//
// Method Name: GetDamage
//
// Description:
//  TODO: Add description
//
//***********************************************************************************************************************************************
int Weapon::GetDamage()
{
   return mDamage;
}

void Weapon::Draw(Graphics& theGraphics, int theColumn, int theRow)
{
   mpImage->Draw(theGraphics, theColumn, theRow);
}

//***************************************************************************************************************************************************
// End Public Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Protected Method Definitions
//***************************************************************************************************************************************************

// Note: There are no protected methods in this class.

//***************************************************************************************************************************************************
// End Protected Method Definitions
//***************************************************************************************************************************************************

//***************************************************************************************************************************************************
// Start Private Method Definitions
//***************************************************************************************************************************************************

// Note: There are no provate methods in this class.

//***************************************************************************************************************************************************
// End Private Method Definitions
//***************************************************************************************************************************************************